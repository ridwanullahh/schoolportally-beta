import { GithubDB } from 'github-db';

const githubUsername = import.meta.env.VITE_GITHUB_USERNAME;
const githubRepo = import.meta.env.VITE_GITHUB_REPO;
const githubToken = import.meta.env.VITE_GITHUB_TOKEN;
const authConfig = {
  verifyEmail: true, // Email verification during signup
  otpTriggers: ['login', 'register', 'password_reset'], // Trigger OTP verification on these actions
  redirectOnLogin: true,
  // Email provider settings (replace with your actual provider)
  emailProvider: {
    service: 'gmail',
    auth: {
      user: import.meta.env.VITE_EMAIL_USER,
      pass: import.meta.env.VITE_EMAIL_PASS,
    },
  },
};

const sdk = new GithubDB(
  {
    githubUsername,
    githubRepo,
    githubToken,
  },
  {
    authConfig,
    dbSchema: {
      users: {
        required: ['id', 'email', 'password'],
        types: {
          id: 'string',
          email: 'string',
          password: 'string',
          firstName: 'string',
          lastName: 'string',
          roles: 'array',
          permissions: 'array',
          verified: 'boolean',
          createdAt: 'string',
          updatedAt: 'string',
          schoolId: 'string',
        },
        defaults: {
          roles: [],
          permissions: [],
          verified: false,
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      schools: {
        required: ['id', 'ownerId', 'name', 'slug'],
        types: {
          id: 'string',
          ownerId: 'string',
          name: 'string',
          slug: 'string',
          address: 'string',
          phone: 'string',
          email: 'string',
          website: 'string',
          logo: 'string',
          favicon: 'string',
          primaryColor: 'string',
          secondaryColor: 'string',
          accentColor: 'string',
          fontFamily: 'string',
          headerStyle: 'string',
          footerStyle: 'string',
          timezone: 'string',
          currency: 'string',
          subscriptionPlan: 'string',
          subscriptionStatus: 'string',
          status: 'string',
          createdAt: 'string',
          updatedAt: 'string',
          onboardingCompleted: 'boolean',
        },
        defaults: {
          status: 'active',
          subscriptionPlan: 'free',
          subscriptionStatus: 'trial',
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
          onboardingCompleted: false,
        },
      },
      pages: {
        required: ['id', 'schoolId', 'title', 'slug', 'type'],
        types: {
          id: 'string',
          schoolId: 'string',
          title: 'string',
          slug: 'string',
          content: 'string',
          type: 'string',
          status: 'string',
          sections: 'array',
          createdAt: 'string',
          updatedAt: 'string',
          uid: 'string',
        },
        defaults: {
          status: 'published',
          sections: [],
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      programs: {
        required: ['id', 'schoolId', 'name'],
        types: {
          id: 'string',
          schoolId: 'string',
          name: 'string',
          description: 'string',
          image: 'string',
          duration: 'string',
          fee: 'number',
          currency: 'string',
          startDate: 'string',
          endDate: 'string',
          status: 'string',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          status: 'active',
          currency: 'USD',
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      classes: {
        required: ['id', 'schoolId', 'name'],
        types: {
          id: 'string',
          schoolId: 'string',
          name: 'string',
          description: 'string',
          teacherId: 'string',
          programId: 'string',
          schedule: 'object',
          capacity: 'number',
          enrolled: 'number',
          fee: 'number',
          status: 'string',
          room: 'string',
          gradeLevel: 'string',
          subject: 'string',
          students: 'array',
          materials: 'array',
          assignments: 'array',
          attendance: 'array',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          capacity: 30,
          enrolled: 0,
          status: 'active',
          students: [],
          materials: [],
          assignments: [],
          attendance: [],
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      blog_posts: {
        required: ['id', 'schoolId', 'title', 'slug', 'content'],
        types: {
          id: 'string',
          schoolId: 'string',
          title: 'string',
          slug: 'string',
          content: 'string',
          excerpt: 'string',
          authorId: 'string',
          status: 'string',
          featuredImage: 'string',
          publishedAt: 'string',
          tags: 'array',
          categories: 'array',
          readingTime: 'number',
          views: 'number',
          likes: 'number',
          comments: 'array',
          relatedPosts: 'array',
          seoTitle: 'string',
          seoDescription: 'string',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          status: 'draft',
          tags: [],
          categories: [],
          comments: [],
          relatedPosts: [],
          views: 0,
          likes: 0,
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      faqs: {
        required: ['id', 'schoolId', 'question', 'answer'],
        types: {
          id: 'string',
          schoolId: 'string',
          question: 'string',
          answer: 'string',
          category: 'string',
          order: 'number',
          status: 'string',
          authorId: 'string',
          helpful: 'number',
          notHelpful: 'number',
          tags: 'array',
          relatedFaqs: 'array',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          category: 'general',
          order: 0,
          status: 'published',
          helpful: 0,
          notHelpful: 0,
          tags: [],
          relatedFaqs: [],
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      announcements: {
        required: ['id', 'schoolId', 'title', 'content'],
        types: {
          id: 'string',
          schoolId: 'string',
          title: 'string',
          content: 'string',
          authorId: 'string',
          priority: 'string',
          targetAudience: 'array',
          status: 'string',
          publishedAt: 'string',
          expiresAt: 'string',
          category: 'string',
          attachments: 'array',
          readBy: 'array',
          pinned: 'boolean',
          sendEmail: 'boolean',
          sendSMS: 'boolean',
          views: 'number',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          priority: 'normal',
          targetAudience: ['all'],
          status: 'published',
          attachments: [],
          readBy: [],
          pinned: false,
          sendEmail: false,
          sendSMS: false,
          views: 0,
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      lms_courses: {
        required: ['id', 'schoolId', 'title'],
        types: {
          id: 'string',
          schoolId: 'string',
          title: 'string',
          description: 'string',
          instructorId: 'string',
          modules: 'array',
          enrollments: 'array',
          status: 'string',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          modules: [],
          enrollments: [],
          status: 'draft',
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      lms_modules: {
        required: ['id', 'courseId', 'title'],
        types: {
          id: 'string',
          courseId: 'string',
          title: 'string',
          content: 'string',
          order: 'number',
          assignments: 'array',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          assignments: [],
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      lms_assignments: {
        required: ['id', 'moduleId', 'title'],
        types: {
          id: 'string',
          moduleId: 'string',
          title: 'string',
          description: 'string',
          dueDate: 'string',
          points: 'number',
          submissions: 'array',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          points: 100,
          submissions: [],
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      lms_submissions: {
        required: ['id', 'assignmentId', 'studentId'],
        types: {
          id: 'string',
          assignmentId: 'string',
          studentId: 'string',
          content: 'string',
          submittedAt: 'string',
          grade: 'number',
          feedback: 'string',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      forms: {
        required: ['id', 'schoolId', 'name'],
        types: {
          id: 'string',
          schoolId: 'string',
          name: 'string',
          fields: 'array',
          submissions: 'array',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          fields: [],
          submissions: [],
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      wiki_articles: {
        required: ['id', 'schoolId', 'title'],
        types: {
          id: 'string',
          schoolId: 'string',
          title: 'string',
          content: 'string',
          categoryId: 'string',
          tags: 'array',
          views: 'number',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          tags: [],
          views: 0,
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },
      wiki_categories: {
        required: ['id', 'schoolId', 'name'],
        types: {
          id: 'string',
          schoolId: 'string',
          name: 'string',
          description: 'string',
          createdAt: 'string',
          updatedAt: 'string',
        },
        defaults: {
          createdAt: () => new Date().toISOString(),
          updatedAt: () => new Date().toISOString(),
        },
      },

    // New modules schemas
    fees: {
      required: ['id', 'schoolId', 'name', 'amount'],
      types: {
        id: 'string',
        schoolId: 'string',
        name: 'string',
        description: 'string',
        amount: 'number',
        currency: 'string',
        dueDate: 'string',
        category: 'string',
        status: 'string',
        studentId: 'string',
        paidAt: 'string',
        paymentMethod: 'string',
        transactionId: 'string',
        paystackConfig: 'object',
        installments: 'array',
        createdAt: 'string'
      },
      defaults: {
        currency: 'NGN',
        status: 'pending',
        createdAt: () => new Date().toISOString()
      }
    },
    events: {
      required: ['id', 'schoolId', 'title', 'date'],
      types: {
        id: 'string',
        schoolId: 'string',
        title: 'string',
        description: 'string',
        date: 'string',
        time: 'string',
        location: 'string',
        category: 'string',
        image: 'string',
        organizer: 'string',
        capacity: 'number',
        registrations: 'array',
        status: 'string',
        tags: 'array',
        recurring: 'boolean',
        recurringPattern: 'object',
        createdAt: 'string'
      },
      defaults: {
        status: 'upcoming',
        recurring: false,
        registrations: [],
        tags: [],
        createdAt: () => new Date().toISOString()
      }
    },
    gallery: {
      required: ['id', 'schoolId', 'title', 'url'],
      types: {
        id: 'string',
        schoolId: 'string',
        title: 'string',
        description: 'string',
        url: 'string',
        type: 'string',
        category: 'string',
        tags: 'array',
        uploadedBy: 'string',
        uploadedAt: 'string',
        featured: 'boolean',
        visibility: 'string',
        metadata: 'object'
      },
      defaults: {
        type: 'image',
        featured: false,
        visibility: 'public',
        tags: [],
        uploadedAt: () => new Date().toISOString()
      }
    },
    jobs: {
      required: ['id', 'schoolId', 'title', 'department'],
      types: {
        id: 'string',
        schoolId: 'string',
        title: 'string',
        department: 'string',
        description: 'string',
        requirements: 'array',
        responsibilities: 'array',
        type: 'string',
        location: 'string',
        salaryRange: 'object',
        status: 'string',
        postedAt: 'string',
        closingDate: 'string',
        applications: 'array',
        contactEmail: 'string',
        benefits: 'array'
      },
      defaults: {
        type: 'full-time',
        status: 'active',
        requirements: [],
        responsibilities: [],
        applications: [],
        benefits: [],
        postedAt: () => new Date().toISOString()
      }
    },
    support_tickets: {
      required: ['id', 'schoolId', 'subject', 'status'],
      types: {
        id: 'string',
        schoolId: 'string',
        subject: 'string',
        description: 'string',
        category: 'string',
        priority: 'string',
        status: 'string',
        submittedBy: 'string',
        assignedTo: 'string',
        responses: 'array',
        attachments: 'array',
        createdAt: 'string',
        updatedAt: 'string',
        resolvedAt: 'string'
      },
      defaults: {
        priority: 'medium',
        status: 'open',
        responses: [],
        attachments: [],
        createdAt: () => new Date().toISOString(),
        updatedAt: () => new Date().toISOString()
      }
    },
    paystack_config: {
      required: ['id', 'schoolId'],
      types: {
        id: 'string',
        schoolId: 'string',
        publicKey: 'string',
        secretKey: 'string',
        webhookUrl: 'string',
        isActive: 'boolean',
        testMode: 'boolean',
        createdAt: 'string'
      },
      defaults: {
        isActive: false,
        testMode: true,
        createdAt: () => new Date().toISOString()
      }
    }
  },

  getCurrentUser: async (token: string) => {
    if (!token) return null;
    const users = await sdk.get<any>('users');
    return users.find((user: any) => user.id === token);
  },
  hasRole: (user: any, role: string) => {
    return user?.roles?.includes(role);
  },
  hasPermission: (user: any, permission: string) => {
    return user?.permissions?.includes(permission);
  },
}
);

export default sdk;
