Bismillah Ar-Rahman Ar-Roheem.  

CRITICALLY IMPORTANT: Always start your work with Bismillah. 

Bismillah Ar-Rahman Ar-Roheem.
### üöÄ **STRICT PRODUCTION-SAFE CODE MODIFICATION**

---

**Remember: You are a highly disciplined senior production engineer. Your only goal is to modify the codebase _exactly_ as instructed ‚Äî no assumptions, no creativity, no additions beyond the task.** 

üëâ **ABSOLUTE RULES (DO NOT BREAK THESE UNDER ANY CIRCUMSTANCES):**

1Ô∏è‚É£ **DO NOT REMOVE, delete, rename, or comment out any existing:**

- Features
    
- Components
    
- Pages
    
- Functions
    
- Code blocks
    

üö´ _Unless explicitly instructed in the task._

---

2Ô∏è‚É£ **DO NOT BREAK or change existing functionality or behavior of the platform in any way.**

- All existing pages, APIs, and components must continue to function _exactly as they do now_.
    
- No regressions, no side effects.
    

---

3Ô∏è‚É£ **DO NOT use:**

- Placeholder data
    
- Mock data
    
- Dummy data
    
- Simulated code
    

‚úÖ _All code must be real, complete, and ready for production use._

---

4Ô∏è‚É£ **DO NOT modify or refactor unrelated code.**

- Make only the minimal, direct changes needed to complete the task.
    
- Do not restructure, optimize, or improve anything beyond the task‚Äôs scope.
    

---

5Ô∏è‚É£ **DO NOT make assumptions.**

- If the task does not explicitly specify a change, leave that part of the code untouched.
    
- If any detail is ambiguous or missing, reply:
    

> `TASK INCOMPLETE: Please clarify [state the ambiguity]`

---

6Ô∏è‚É£ **Your code must:**

- Be production-ready, clean, and tested (no pseudo code or unfinished logic)
    
- Integrate fully with the existing codebase as-is
    

---

üëâ **DELIVERABLE FORMAT:**  
‚úÖ **ONLY provide the code required for the requested change**  
‚úÖ **Include full file paths and exact code modifications (before/after or full file content if needed)**  
‚úÖ **NO explanations, no extra suggestions, no commentary, no assumptions**

---

### TASK TO PERFORM:

Currently, Alhamdulillah, the platform is working, but need several improvements. 

Firstly, on the styles and theming system particularly for school's public frontend website. Ma'sha'Alah, we have a site editor builder that is working. But the current issues therein is styles. We want to ensure we have as many modern styles as possible for headers, footers, sections, breadcrumbs, archives and single post pages to school owner can switch to any style in any areas so as to make their site unique. Also, on the theming system, the goal is to make things easy for school owner, so we are grouping similar styles from each of those areas under one theme - making 26 themes for each of the 26 styles for each of the areas(and we are supporting styles overiding in any areas, for example a school might choose theme 5, but they might switch their hero section style to style 3, so the style 3 for that section should overide their default style 5 from the theme).  Currently, there are around 26 styles defined for each of those areas but the current issue is that, all those 26 styles for each of those areas are like zero because they either not modern or doesnt render as expected on school's frontend.  We want to fix the issue and ensure each of the styles are modern and also render appropriately on frontend. And one critically important things to note is that, we want each styles to utilize the school's defined brand color palletes, that's while we have branding system in place. 


Also, currently the theming system is not functional as expected atall. So let start with the styles, because it is styles that make up theme. 

Headers (26 styles), Footer(26 styles), Breadcrumb(26 Styles), Each of the 29 sections @/src/components/sections (26 styles each of each of the section), 26 Styles each for single post page and 26 each for archive pages for public modules that are here @/src/pages/school . 

Also, critically important: There are som modules that have a dedicated sections, all those section should use dynamic datas from their respective modules - no dummies or mock. One those section is blog section which have a blog module, but you need to remove the current image that was added to this section because we don't support that, also, it's doesnt currently have proper linking to the single post page - fix the issue too. Ensure to check the schema to see what each module's section can support. 

Also, i maid mention of this last time "Also it's important to note that, on section styles, there are some sections that are dedicated for some admin module i.e they have associated admin module such blog section, classes section, programs sections and other sections that have associated admin modules, all this section should use dynamic datas from the db not hardcorded or dummies, and they should works with their respective schemas but their 26 styles each is only distint in designs and layouts. Also you add fields option to set number of their posts to show, taxonomy filtering support and load more support(Ajax, infinite scroll, ajax pagination or button to their archive page)  in there respective section editors fields. Also robust search, sort and  filtering features for each of those dynamic module based sections and add fields for enabling the search, sort and filtering on their section editor - this is so as to ensure flexibility because for example the blog section usage on homepage will be different from the blog on a dedicated blog page that use same blog section i.e that of the homepage will propably be an highlight that will have a button link to view all blog post, but that of the same section use on a created blog page might use features such as search, sort, filtering, load more.  " - though an attempt to implement this have been made partially but not fully functional, moreover the section editor have not been updated as appropriate. 


NB: If you work so much on those styles(which you should) but you don't update the neccessary aspect to reflect your work such as site editor section's editor style section and frontend redering for each of the sections, theme tab areas in the site editor for the archives and single post pages styles and frontend rendering and other aspect - then you would have failed the task and wast efforts. So you need to fully integrate everything to works. 


**Remember**: The goal is to create a production-ready system that users will actually want to use. Focus on quality over quantity, and ensure each feature is completely functional before moving to the next. And Ensure to complete all task FULLY. 


IMPORTANT: On the UI/UX of each styles, we don't just want a style/layouts each should be unique, modern, beautiful and distint (while ensure to utilize school's defined dynamic brand color palletes)

---
  
Implement all those fully functional now and continue to the remaining feature as in the original spec. 

. : Critically Important.
 FINAL NOTEEnsure everything is github db sdk focused first to ensure it's full functional and production ready. - Adjust and modified the sdk db schema config as needed in the respective file(s)

üí• **If you attempt to:**

- Remove features
    
- Break existing functionality
    
- Use placeholder/mock/dummy/simulated code
    
- Modify unrelated code
    

‚úÖ **You will have failed the task. Do not proceed unless you can strictly follow the above rules.**